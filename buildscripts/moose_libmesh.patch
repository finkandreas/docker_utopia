diff --git a/include/base/dof_map.h b/include/base/dof_map.h
index 0fe1f0351..ce6cf8143 100644
--- a/include/base/dof_map.h
+++ b/include/base/dof_map.h
@@ -44,6 +44,12 @@
 #include <vector>
 #include <memory>
 
+#include <type_traits>
+namespace {
+  typedef std::make_unsigned<long>::type dummy__;
+}
+
+
 namespace libMesh
 {
 
diff --git a/src/numerics/petsc_vector.C b/src/numerics/petsc_vector.C
index 80461b287..d9d107ceb 100644
--- a/src/numerics/petsc_vector.C
+++ b/src/numerics/petsc_vector.C
@@ -679,7 +679,7 @@ void PetscVector<T>::localize (NumericVector<T> & v_local_in) const
   ierr = ISCreateLibMesh(this->comm().get(), n, &idx[0], PETSC_USE_POINTER, &is);
   LIBMESH_CHKERR(ierr);
 
-  ierr = VecScatterCreate(_vec,          is,
+  ierr = VecScatterCreateWithData(_vec,          is,
                           v_local->_vec, is,
                           &scatter);
   LIBMESH_CHKERR(ierr);
@@ -755,7 +755,7 @@ void PetscVector<T>::localize (NumericVector<T> & v_local_in,
                            n_sl+this->local_size(), &idx[0], PETSC_USE_POINTER, &is);
   LIBMESH_CHKERR(ierr);
 
-  ierr = VecScatterCreate(_vec,          is,
+  ierr = VecScatterCreateWithData(_vec,          is,
                           v_local->_vec, is,
                           &scatter);
   LIBMESH_CHKERR(ierr);
@@ -809,7 +809,7 @@ void PetscVector<T>::localize (std::vector<T> & v_local,
 
   // Create the VecScatter object.  "NULL" means "use the identity IS".
   VecScatter scatter;
-  ierr = VecScatterCreate(_vec,
+  ierr = VecScatterCreateWithData(_vec,
                           /*src is=*/is,
                           /*dest vec=*/dest,
                           /*dest is=*/NULL,
@@ -895,7 +895,7 @@ void PetscVector<T>::localize (const numeric_index_type first_local_idx,
                            my_local_size ? &idx[0] : libmesh_nullptr, PETSC_USE_POINTER, &is);
     LIBMESH_CHKERR(ierr);
 
-    ierr = VecScatterCreate(_vec,              is,
+    ierr = VecScatterCreateWithData(_vec,              is,
                             parallel_vec._vec, is,
                             &scatter);
     LIBMESH_CHKERR(ierr);
@@ -1317,7 +1317,7 @@ void PetscVector<T>::create_subvector(NumericVector<T> & subvector,
   LIBMESH_CHKERR(ierr);
 
   // Construct the scatter object
-  ierr = VecScatterCreate(this->_vec,
+  ierr = VecScatterCreateWithData(this->_vec,
                           parent_is,
                           petsc_subvector->_vec,
                           subvector_is,
diff --git a/src/solvers/petsc_linear_solver.C b/src/solvers/petsc_linear_solver.C
index 802aafc3e..1a2562350 100644
--- a/src/solvers/petsc_linear_solver.C
+++ b/src/solvers/petsc_linear_solver.C
@@ -471,7 +471,7 @@ PetscLinearSolver<T>::solve (SparseMatrix<T> &  matrix_in,
       ierr = VecSetFromOptions(subsolution);
       LIBMESH_CHKERR(ierr);
 
-      ierr = VecScatterCreate(rhs->vec(), _restrict_solve_to_is, subrhs, libmesh_nullptr, &scatter);
+      ierr = VecScatterCreateWithData(rhs->vec(), _restrict_solve_to_is, subrhs, libmesh_nullptr, &scatter);
       LIBMESH_CHKERR(ierr);
 
       ierr = VecScatterBegin(scatter,rhs->vec(),subrhs,INSERT_VALUES,SCATTER_FORWARD);
@@ -525,7 +525,7 @@ PetscLinearSolver<T>::solve (SparseMatrix<T> &  matrix_in,
           ierr = VecSetFromOptions(subvec1);
           LIBMESH_CHKERR(ierr);
 
-          ierr = VecScatterCreate(rhs->vec(),_restrict_solve_to_is_complement, subvec1, libmesh_nullptr, &scatter1);
+          ierr = VecScatterCreateWithData(rhs->vec(),_restrict_solve_to_is_complement, subvec1, libmesh_nullptr, &scatter1);
           LIBMESH_CHKERR(ierr);
 
           ierr = VecScatterBegin(scatter1,_subset_solve_mode==SUBSET_COPY_RHS ? rhs->vec() : solution->vec(),subvec1,INSERT_VALUES,SCATTER_FORWARD);
@@ -738,7 +738,7 @@ PetscLinearSolver<T>::adjoint_solve (SparseMatrix<T> &  matrix_in,
       ierr = VecSetFromOptions(subsolution);
       LIBMESH_CHKERR(ierr);
 
-      ierr = VecScatterCreate(rhs->vec(),_restrict_solve_to_is, subrhs, libmesh_nullptr, &scatter);
+      ierr = VecScatterCreateWithData(rhs->vec(),_restrict_solve_to_is, subrhs, libmesh_nullptr, &scatter);
       LIBMESH_CHKERR(ierr);
 
       ierr = VecScatterBegin(scatter,rhs->vec(),subrhs,INSERT_VALUES,SCATTER_FORWARD);
@@ -792,7 +792,7 @@ PetscLinearSolver<T>::adjoint_solve (SparseMatrix<T> &  matrix_in,
           ierr = VecSetFromOptions(subvec1);
           LIBMESH_CHKERR(ierr);
 
-          ierr = VecScatterCreate(rhs->vec(),_restrict_solve_to_is_complement, subvec1, libmesh_nullptr, &scatter1);
+          ierr = VecScatterCreateWithData(rhs->vec(),_restrict_solve_to_is_complement, subvec1, libmesh_nullptr, &scatter1);
           LIBMESH_CHKERR(ierr);
 
           ierr = VecScatterBegin(scatter1,_subset_solve_mode==SUBSET_COPY_RHS ? rhs->vec() : solution->vec(),subvec1,INSERT_VALUES,SCATTER_FORWARD);
@@ -1023,7 +1023,7 @@ PetscLinearSolver<T>::solve (const ShellMatrix<T> & shell_matrix,
       ierr = VecSetFromOptions(subsolution);
       LIBMESH_CHKERR(ierr);
 
-      ierr = VecScatterCreate(rhs->vec(),_restrict_solve_to_is, subrhs, libmesh_nullptr, &scatter);
+      ierr = VecScatterCreateWithData(rhs->vec(),_restrict_solve_to_is, subrhs, libmesh_nullptr, &scatter);
       LIBMESH_CHKERR(ierr);
 
       ierr = VecScatterBegin(scatter,rhs->vec(),subrhs,INSERT_VALUES,SCATTER_FORWARD);
@@ -1066,7 +1066,7 @@ PetscLinearSolver<T>::solve (const ShellMatrix<T> & shell_matrix,
           ierr = VecSetFromOptions(subvec1);
           LIBMESH_CHKERR(ierr);
 
-          ierr = VecScatterCreate(rhs->vec(),_restrict_solve_to_is_complement, subvec1, libmesh_nullptr, &scatter1);
+          ierr = VecScatterCreateWithData(rhs->vec(),_restrict_solve_to_is_complement, subvec1, libmesh_nullptr, &scatter1);
           LIBMESH_CHKERR(ierr);
 
           ierr = VecScatterBegin(scatter1,_subset_solve_mode==SUBSET_COPY_RHS ? rhs->vec() : solution->vec(),subvec1,INSERT_VALUES,SCATTER_FORWARD);
@@ -1294,7 +1294,7 @@ PetscLinearSolver<T>::solve (const ShellMatrix<T> & shell_matrix,
       ierr = VecSetFromOptions(subsolution);
       LIBMESH_CHKERR(ierr);
 
-      ierr = VecScatterCreate(rhs->vec(),_restrict_solve_to_is, subrhs, libmesh_nullptr, &scatter);
+      ierr = VecScatterCreateWithData(rhs->vec(),_restrict_solve_to_is, subrhs, libmesh_nullptr, &scatter);
       LIBMESH_CHKERR(ierr);
 
       ierr = VecScatterBegin(scatter,rhs->vec(),subrhs,INSERT_VALUES,SCATTER_FORWARD);
@@ -1343,7 +1343,7 @@ PetscLinearSolver<T>::solve (const ShellMatrix<T> & shell_matrix,
           ierr = VecSetFromOptions(subvec1);
           LIBMESH_CHKERR(ierr);
 
-          ierr = VecScatterCreate(rhs->vec(),_restrict_solve_to_is_complement, subvec1, libmesh_nullptr, &scatter1);
+          ierr = VecScatterCreateWithData(rhs->vec(),_restrict_solve_to_is_complement, subvec1, libmesh_nullptr, &scatter1);
           LIBMESH_CHKERR(ierr);
 
           ierr = VecScatterBegin(scatter1,_subset_solve_mode==SUBSET_COPY_RHS ? rhs->vec() : solution->vec(),subvec1,INSERT_VALUES,SCATTER_FORWARD);
@@ -1693,7 +1693,7 @@ LinearConvergenceReason PetscLinearSolver<T>::get_converged_reason() const
     case KSP_DIVERGED_INDEFINITE_MAT   : return DIVERGED_INDEFINITE_MAT;
     case KSP_CONVERGED_ITERATING       : return CONVERGED_ITERATING;
 #if !PETSC_VERSION_LESS_THAN(3,7,0)
-    case KSP_DIVERGED_PCSETUP_FAILED   : return DIVERGED_PCSETUP_FAILED;
+    case KSP_DIVERGED_PC_FAILED   : return DIVERGED_PCSETUP_FAILED;
 #endif
     default :
       libMesh::err << "Unknown convergence flag!" << std::endl;
