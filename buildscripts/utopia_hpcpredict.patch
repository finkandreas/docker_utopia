diff --git a/utopia_fe/fractures/utopia_MeshTransferOperatorBidirectional.cpp b/utopia_fe/fractures/utopia_MeshTransferOperatorBidirectional.cpp
new file mode 100644
index 00000000..6fcaae61
--- /dev/null
+++ b/utopia_fe/fractures/utopia_MeshTransferOperatorBidirectional.cpp
@@ -0,0 +1,108 @@
+#include "utopia_MeshTransferOperatorBidirectional.hpp"
+
+#include "utopia_L2LocalAssembler.hpp"
+#include "utopia_ApproxL2LocalAssembler.hpp"
+#include "utopia_InterpolationLocalAssembler.hpp"
+#include "utopia_Local2Global.hpp"
+#include "utopia_BidirectionalL2LocalAssembler.hpp"
+
+#include <map>
+
+namespace utopia {
+
+	static const std::map<std::string, TransferOperatorRType> &get_str_to_type()
+	{
+		static std::map<std::string, TransferOperatorRType> types;
+
+		if(types.empty()) {
+			types["BIDIRECTIONAL_L2_PROJECTION"] = BIDIRECTIONAL_L2_PROJECTION;
+			types["BIDIRECTIONAL_PSEUDO_L2_PROJECTION"] = BIDIRECTIONAL_PSEUDO_L2_PROJECTION;
+
+			//other way of writing them
+			types["bidirectional-l2-projection"] = BIDIRECTIONAL_L2_PROJECTION;
+			types["bidirectional-pseudo-l2-projection"] = BIDIRECTIONAL_PSEUDO_L2_PROJECTION;
+		}
+
+		return types;
+	}
+
+	bool MeshTransferOperatorBidirectional::initialize(const std::string operator_type)
+	{
+		const auto &m = get_str_to_type(); 
+
+		auto it = m.find(operator_type);
+
+		if(it == m.end()) {
+			return initialize(BIDIRECTIONAL_PSEUDO_L2_PROJECTION);
+		} else {
+			return initialize(it->second);
+		}
+	}
+
+	bool MeshTransferOperatorBidirectional::initialize(const TransferOperatorRType operator_type)
+	{
+		std::shared_ptr<LocalAssembler> assembler;
+
+		bool use_interpolation = false;
+		bool use_biorth        = false;
+		bool is_bidirectonal   = false;
+
+		switch(operator_type) {
+			
+
+			case BIDIRECTIONAL_L2_PROJECTION:
+			{
+				std::cout << "[Status] using bi l2 projection" << std::endl;
+				assembler = std::make_shared<BidirectionalL2LocalAssembler>(from_mesh->mesh_dimension(), false, true);
+				is_bidirectonal = true;
+				break;
+			}
+
+			case BIDIRECTIONAL_PSEUDO_L2_PROJECTION:
+			{
+				std::cout << "[Status] using bi pseudo l2 projection" << std::endl;
+				assembler = std::make_shared<BidirectionalL2LocalAssembler>(from_mesh->mesh_dimension(), true, false);
+				use_biorth = true;
+				is_bidirectonal = true;
+				break;
+			}
+
+			default:
+			{
+				assert(false);
+				return false;
+			}
+		}
+
+		auto local2global = std::make_shared<Local2Global>(use_interpolation);
+		TransferAssemblerR transfer_assembler(assembler, local2global);
+
+		std::vector< std::shared_ptr<SparseMatrix> > mats;
+		if(!transfer_assembler.assemble(from_mesh, from_dofs, from_dofs_r, to_mesh, to_dofs, to_dofs_r, mats, opts)) {
+			return false;
+		}
+
+		if(is_bidirectonal) {
+			if(use_biorth) {
+				auto forward = std::make_shared<PseudoL2TransferOperatorR>();
+				forward->init_from_coupling_operator(*mats[0]);
+
+				auto backward = std::make_shared<PseudoL2TransferOperatorR>();
+				backward->init_from_coupling_operator(*mats[1]);
+				operator_ = std::make_shared<BidirectionalOperator>(forward, backward);
+
+			} else {
+				auto forward = std::make_shared<L2TransferOperatorR>(mats[0], mats[1], std::make_shared<Factorization<USparseMatrix, UVector>>());
+				forward->fix_mass_matrix_operator();
+
+				auto backward = std::make_shared<L2TransferOperatorR>(mats[2], mats[3], std::make_shared<Factorization<USparseMatrix, UVector>>());
+				backward->fix_mass_matrix_operator();
+				operator_ = std::make_shared<BidirectionalOperator>(forward, backward);
+			}
+
+		} 
+
+		operator_->describe(std::cout);
+		return true;
+	}
+}
diff --git a/utopia_fe/fractures/utopia_MeshTransferOperatorBidirectional.hpp b/utopia_fe/fractures/utopia_MeshTransferOperatorBidirectional.hpp
new file mode 100644
index 00000000..936fb76d
--- /dev/null
+++ b/utopia_fe/fractures/utopia_MeshTransferOperatorBidirectional.hpp
@@ -0,0 +1,97 @@
+#ifndef UTOPIA_POUROUS_MEDIA_TO_FRACTURE_TRANSFER_R_HPP
+#define UTOPIA_POUROUS_MEDIA_TO_FRACTURE_TRANSFER_R_HPP
+
+#include "utopia_libmesh.hpp"
+#include "utopia_TransferAssemblerR.hpp"
+#include "utopia_Path.hpp"
+
+
+#include <memory>
+
+namespace utopia {
+	class MeshTransferOperatorBidirectional final : public TransferOperatorR {
+	public:
+		using SparseMatrix  = utopia::USparseMatrix;
+		using Vector 		= utopia::UVector;
+		using MeshBase      = libMesh::MeshBase;
+		using DofMap        = libMesh::DofMap;
+
+		MeshTransferOperatorBidirectional(
+			const std::shared_ptr<MeshBase> &from_mesh,
+			const std::shared_ptr<DofMap>   &from_dofs,
+			const std::shared_ptr<DofMap>   &from_dofs_r,
+			const std::shared_ptr<MeshBase> &to_mesh,
+			const std::shared_ptr<DofMap>   &to_dofs,
+			const std::shared_ptr<DofMap>   &to_dofs_r,
+			const TransferOptionsR &opts = TransferOptionsR()
+		) : 
+		from_mesh(from_mesh),
+		from_dofs(from_dofs),
+	    from_dofs_r(from_dofs_r),
+		to_mesh(to_mesh),
+		to_dofs(to_dofs),
+		to_dofs_r(to_dofs_r),
+		opts(opts)
+		{}
+
+		//@brief operator_type \in \{ INTERPOLATION| L2_PROJECTION| PSEUDO_L2_PROJECTION | APPROX_L2_PROJECTION \}
+		bool initialize(const TransferOperatorRType operator_type = utopia::BIDIRECTIONAL_L2_PROJECTION);
+		bool initialize(const std::string operator_type);
+
+		inline void apply(const Vector &from, Vector &to) const override
+		{
+			assert(operator_);
+			operator_->apply(from, to);
+		}
+
+		inline void apply_transpose(const Vector &from, Vector &to) const override
+		{
+			assert(operator_);
+			operator_->apply_transpose(from, to);
+		}
+
+		inline void describe(std::ostream &os) const override
+		{
+			if(operator_) {
+				operator_->describe(os);
+			}
+		}
+
+		bool write(const Path &path) const override
+		{ 
+			if(operator_) {
+				return operator_->write(path);
+			}
+
+			return false;
+		}
+
+		template<class AlgebraicOperator> 
+		inline std::shared_ptr<AlgebraicOperator> get() const
+		{
+			return std::dynamic_pointer_cast<AlgebraicOperator>(operator_);
+		}
+
+		void set_normalize_rows(const bool val)
+		{
+
+		}
+
+	private:
+		std::shared_ptr<MeshBase> from_mesh;
+		std::shared_ptr<DofMap>   from_dofs;
+		std::shared_ptr<DofMap>   from_dofs_r;
+		std::shared_ptr<MeshBase> to_mesh;
+		std::shared_ptr<DofMap>   to_dofs;
+		std::shared_ptr<DofMap>   to_dofs_r;
+		TransferOptionsR opts;
+
+		std::shared_ptr<TransferOperatorR> operator_;
+		bool normalize_rows_;
+
+	};
+
+	using PourousMediaToFractureTransfer = MeshTransferOperatorBidirectional;
+}
+
+#endif //UTOPIA_POUROUS_MEDIA_TO_FRACTURE_TRANSFER_HPP
diff --git a/utopia_fe/transfer/utopia_TransferAssemblerR.cpp b/utopia_fe/transfer/utopia_TransferAssemblerR.cpp
new file mode 100644
index 00000000..d736f221
--- /dev/null
+++ b/utopia_fe/transfer/utopia_TransferAssemblerR.cpp
@@ -0,0 +1,746 @@
+#include "utopia_TransferAssemblerR.hpp"
+
+#include "utopia_LocalAssembler.hpp"
+#include "utopia_BidirectionalL2LocalAssembler.hpp"
+
+#include "utopia_Local2Global.hpp"
+#include "utopia_QMortarBuilder.hpp"
+
+#include "libmesh/mesh_inserter_iterator.h"
+#include "libmesh/elem.h"
+
+#include "utopia_libmesh.hpp"
+#include "utopia_VTree.hpp"
+
+#include "utopia_ElementDofMap.hpp"
+#include "utopia_FESpacesRAdapter.hpp"
+
+#include "moonolith_profiler.hpp"
+#include "moonolith_redistribute.hpp"
+#include "moonolith_tree.hpp"
+#include "moonolith_n_tree_mutator_factory.hpp"
+#include "moonolith_n_tree_with_span_mutator_factory.hpp"
+#include "moonolith_n_tree_with_tags_mutator_factory.hpp"
+#include "moonolith_sparse_matrix.hpp"
+#include "par_moonolith.hpp"
+
+#include "utopia_Socket.hpp"
+
+#include <cmath>
+#include <queue>
+#include <algorithm>
+#include <sstream>
+#include <numeric>
+
+
+/**
+ * TODO:
+   - Allow element-node-dof <-> node-dof convertions
+   - Construction of accumulation operators
+   - Discrimination of element-matrices and deletion of bad entries (e.g., duplicate volume-surface maps)
+ */
+
+namespace utopia {
+
+	template<int Dimensions>
+	class FESpaceSerializerDeserializer {
+	public:
+		using InputStream  = moonolith::InputStream;
+		using OutputStream = moonolith::OutputStream;
+
+		using NTreeT 		= utopia::VTree<Dimensions>;
+		using DataContainer = typename NTreeT::DataContainer;
+		using Adapter       = typename NTreeT::DataType;
+
+		FESpaceSerializerDeserializer(
+			const libMesh::Parallel::Communicator &comm,
+			const TransferOptionsR &opts,
+			const std::shared_ptr<FESpacesRAdapter> &local_spaces)
+		: comm(comm),
+		  m_comm(comm.get()),
+		  opts(opts),
+		  local_spaces(local_spaces)
+		{}
+
+		const libMesh::Parallel::Communicator &comm;
+		moonolith::Communicator m_comm;
+		const TransferOptionsR &opts;
+
+		std::shared_ptr<FESpacesRAdapter> local_spaces;
+		std::map<long, std::shared_ptr<FESpacesRAdapter> > spaces;
+		std::map<long, std::vector<std::shared_ptr<FESpacesRAdapter> > > migrated_spaces;
+
+		void read(
+			const long ownerrank,
+			const long senderrank,
+			bool is_forwarding, DataContainer &data,
+			InputStream &in
+		) {
+
+			CHECK_STREAM_READ_BEGIN("vol_proj", in);
+
+			std::shared_ptr<FESpacesRAdapter> proc_space = std::make_shared<FESpacesRAdapter>(m_comm);
+
+			read_spaces(in, *proc_space, comm, comm);
+
+			if (!is_forwarding) {
+				assert(!spaces[ownerrank]);
+				spaces[ownerrank] = proc_space;
+			} else {
+				migrated_spaces[ownerrank].push_back(proc_space);
+			}
+
+			data.reserve(data.size() + 3000);
+
+			long offset = 0;
+
+			if(opts.tags.empty()){
+				int space_num = 0;
+				for(auto s : proc_space->spaces()) {
+					if(s) {
+						//ID_FIX this should be fine n_elem is actually local sence the mesh is a SerialMesh
+						for (int i=0; i<s->n_elem(); i++) {
+							data.push_back(Adapter(*s, i, offset + i,space_num));
+							assert(!proc_space->dof_map(space_num)[i].empty());
+							assert(!proc_space->dof_map_reverse(space_num)[i].empty());
+							data.back().set_dof_map(&proc_space->dof_map(space_num)[i].global);
+							data.back().set_dof_map_reverse(&proc_space->dof_map_reverse(space_num)[i].global);
+						}
+
+						offset += s->n_elem();
+
+					}
+
+					++space_num;
+				}
+			} else {
+				int space_num = 0;
+				for(auto s : proc_space->spaces()) {
+					if(s) {
+						for (int i=0; i<s->n_elem(); i++) {
+							const libMesh::Elem * elem = s->elem_ptr(i);
+							//Volume Tag
+							int volume_tag = elem->subdomain_id();
+							data.push_back(Adapter(*s, i, offset + i, volume_tag));
+							assert(!proc_space->dof_map(space_num)[i].empty());
+							assert(!proc_space->dof_map_reverse(space_num)[i].empty());
+							data.back().set_dof_map(&proc_space->dof_map(space_num)[i].global);
+							data.back().set_dof_map_reverse(&proc_space->dof_map_reverse(space_num)[i].global);
+						}
+
+						offset += s->n_elem();
+
+					}
+
+					++space_num;
+				}
+			}
+
+			CHECK_STREAM_READ_END("vol_proj", in);
+		};
+
+		void write(
+			const long ownerrank, const long recvrank,
+			const std::vector<long>::const_iterator &begin,
+			const std::vector<long>::const_iterator &end,
+			const DataContainer &data,
+			OutputStream &out) {
+
+			CHECK_STREAM_WRITE_BEGIN("vol_proj", out);
+
+			if (ownerrank == m_comm.rank()) {
+				write_element_selection(begin, end, *local_spaces, out);
+			} else {
+				auto it = spaces.find(ownerrank);
+				assert(it != spaces.end());
+				std::shared_ptr<FESpacesRAdapter> spaceptr = it->second;
+				assert(std::distance(begin, end) > 0);
+				write_element_selection(begin, end, *spaceptr, out);
+			}
+
+			CHECK_STREAM_WRITE_END("vol_proj", out);
+		};
+
+	};
+
+	template class FESpaceSerializerDeserializer<2>;
+	template class FESpaceSerializerDeserializer<3>;
+
+	template<int Dimensions>
+	class DefaultAlgorithmR final : public TransferAssemblerR::AlgorithmR {
+	public:
+		using FunctionSpace = utopia::LibMeshFunctionSpace;
+		using SparseMatrix  = utopia::USparseMatrix;
+		using MeshBase      = libMesh::MeshBase;
+		using DofMap        = libMesh::DofMap;
+		using NTreeT 		= utopia::VTree<Dimensions>;
+		using DataContainer = typename NTreeT::DataContainer;
+		using Adapter       = typename NTreeT::DataType;
+
+		DefaultAlgorithmR(
+			const std::shared_ptr<MeshBase> &from_mesh,
+			const std::shared_ptr<DofMap>   &from_dofs,
+			const std::shared_ptr<DofMap>   &from_dofs_r,
+			const std::shared_ptr<MeshBase> &to_mesh,
+			const std::shared_ptr<DofMap>   &to_dofs,
+			const std::shared_ptr<DofMap>   &to_dofs_r,
+			const TransferOptionsR &opts,
+			const std::shared_ptr<LocalAssembler> &assembler,
+			const std::shared_ptr<Local2Global>  &local2global)
+		{
+			init(from_mesh, from_dofs, from_dofs_r, to_mesh, to_dofs, to_dofs_r, opts, assembler, local2global);
+		}
+
+		void init(
+			const std::shared_ptr<MeshBase> &from_mesh,
+			const std::shared_ptr<DofMap>   &from_dofs,
+			const std::shared_ptr<DofMap>   &from_dofs_r,
+			const std::shared_ptr<MeshBase> &to_mesh,
+			const std::shared_ptr<DofMap>   &to_dofs,
+			const std::shared_ptr<DofMap>   &to_dofs_r,
+			const TransferOptionsR &opts,
+			const std::shared_ptr<LocalAssembler> &assembler,
+			const std::shared_ptr<Local2Global>   &local2global)
+		{
+			this->from_mesh = from_mesh;
+			this->from_dofs = from_dofs;
+			this->from_dofs_r = from_dofs_r;
+			this->to_mesh 	= to_mesh;
+			this->to_dofs	= to_dofs;
+			this->to_dofs_r	= to_dofs_r;
+			this->opts 		= opts;
+
+			this->assembler = assembler;
+			this->local2global = local2global;
+
+			this->comm = moonolith::Communicator(from_mesh->comm().get());
+			std::cout<<"FESpacesRAdapte"<<std::endl;
+			this->local_spaces = std::make_shared<FESpacesRAdapter>(from_mesh, to_mesh, from_dofs, to_dofs, from_dofs_r, to_dofs_r, opts.from_var_num, opts.to_var_num, opts.from_var_num_r, opts.to_var_num_r);
+		   
+			predicate = std::make_shared<moonolith::MasterAndSlave>();
+            std::cout<<"FESpacesRAdapte after"<<std::endl;
+			if(opts.tags.empty()){
+				predicate->add(0, 1);
+			} else {
+				for(auto t : opts.tags) {
+					predicate->add(t.first, t.second);
+				}
+			}
+			std::cout<<"FESpacesRAdapte after 2"<<std::endl;
+		}
+
+		void pre_assemble()
+		{
+			const std::size_t n_forms = mat_buffer.size();
+
+			std::cout<<"pre_assemble"<<std::endl;
+			
+			for(std::size_t i = 0; i < n_forms; ++i) {
+				mat_buffer[i] = std::make_shared< moonolith::SparseMatrix<double> >(comm);
+				local_element_matrices_sum[i] = 0.;
+
+				switch(assembler->type(i)) {
+					
+					case LocalAssembler::MASTER_X_SLAVE: 
+					{
+						
+					    std::cout<<"MASTER_X_SLAVE"<<std::endl;
+						mat_buffer[i]->set_size(to_dofs->n_dofs(), from_dofs->n_dofs());
+						break;
+					}
+
+					case LocalAssembler::SLAVE_X_SLAVE:
+					{
+						std::cout<<"SLAVE_X_SLAVE"<<std::endl;
+						mat_buffer[i]->set_size(to_dofs->n_dofs(), to_dofs->n_dofs());
+						break;
+					}
+
+					case LocalAssembler::MASTER_X_MASTER:
+					{
+						std::cout<<"MASTER_X_MASTER"<<std::endl;
+
+						mat_buffer[i]->set_size(from_dofs_r->n_dofs(), from_dofs_r->n_dofs());
+						break;
+					}
+
+					case LocalAssembler::SLAVE_X_MASTER: 
+					{
+						
+                        std::cout<<"SLAVE_X_MASTER"<<std::endl;
+						mat_buffer[i]->set_size(from_dofs_r->n_dofs(), to_dofs_r->n_dofs());
+						break;
+					}
+
+					default:
+					{
+						assert(false);
+						break;
+					}
+				}
+			}
+		}
+
+		bool assemble(Adapter &master,
+					  Adapter &slave)
+
+		{
+			
+
+			//FIXME assuming elements are all the same
+		 	auto master_type = from_dofs->variable(opts.from_var_num).type();
+		 	auto slave_type  = to_dofs->variable(opts.to_var_num).type();
+
+			const auto &master_mesh = master.space();;
+			const auto &slave_mesh  = slave.space();
+
+			const int src_index  = master.element();
+			const int dest_index = slave.element();
+
+			auto &master_el = *master_mesh.elem(src_index);
+			auto &slave_el  = *slave_mesh.elem(dest_index);
+
+			for(auto &mat_i : elemmat) {
+				mat_i.zero();
+			}
+
+			if(assembler->assemble(master_el, master_type, slave_el, slave_type, elemmat)) {
+				
+				for(std::size_t i = 0; i < elemmat.size(); ++i) {	
+					auto &mat_i = elemmat[i];
+					auto partial_sum = std::accumulate(mat_i.get_values().begin(), mat_i.get_values().end(), libMesh::Real(0.0));
+					local_element_matrices_sum[i] += partial_sum;
+
+					switch(assembler->type(i)) {
+						
+						case LocalAssembler::MASTER_X_SLAVE: 
+						{
+							const auto &master_dofs = master.dof_map();
+							const auto &slave_dofs  = slave.dof_map();
+
+							local2global->apply(master_dofs, slave_dofs, elemmat[i], *mat_buffer[i]);
+							break;
+						}
+
+						case LocalAssembler::SLAVE_X_SLAVE:
+						{
+							const auto &slave_dofs  = slave.dof_map();
+
+							local2global->apply(slave_dofs, slave_dofs, elemmat[i], *mat_buffer[i]);
+							break;
+						}
+
+						case LocalAssembler::MASTER_X_MASTER:
+						{
+							
+							const auto &master_dofs_r = master.dof_map_reverse();
+
+							local2global->apply(master_dofs_r, master_dofs_r, elemmat[i], *mat_buffer[i]);
+							break;
+						}
+
+						case LocalAssembler::SLAVE_X_MASTER: 
+						{
+							
+							const auto &master_dofs_r = master.dof_map_reverse();
+							const auto &slave_dofs_r  = slave.dof_map_reverse();
+
+							local2global->apply(slave_dofs_r, master_dofs_r, elemmat[i], *mat_buffer[i]);
+							break;
+						}
+
+						default:
+						{
+							assert(false);
+							break;
+						}
+					}
+				}
+
+				return true;
+			} else {
+				return false;
+			}
+		}
+
+		void print_stats()
+		{
+			double total_intersection_volume = 0.;
+			{
+				auto l2_assembler = std::dynamic_pointer_cast<BidirectionalL2LocalAssembler>(assembler);
+				if(l2_assembler) {
+					total_intersection_volume = l2_assembler->get_q_builder().get_total_intersection_volume();
+
+					double volumes[2] = { local_element_matrices_sum[0], total_intersection_volume };
+					comm.all_reduce(volumes, 2, moonolith::MPISum());
+
+					if(comm.is_root()) {
+						std::cout << "sum(B): " << volumes[0] << ", vol(I): " << volumes[1] << std::endl;
+					}
+				}
+			}
+		}
+
+		void post_assemble(std::size_t buffer_num)
+		{
+			SparseMatrix &mat = *mats_[buffer_num];
+
+			libMesh::dof_id_type n_dofs_on_proc_trial = 0;
+			libMesh::dof_id_type n_dofs_on_proc_test  = 0;
+
+			switch(assembler->type(buffer_num)) {
+				
+				case LocalAssembler::MASTER_X_SLAVE: 
+				{
+					n_dofs_on_proc_trial = from_dofs->n_local_dofs();
+					n_dofs_on_proc_test  = to_dofs->n_local_dofs();
+					break;
+				}
+
+				case LocalAssembler::SLAVE_X_SLAVE:
+				{
+					n_dofs_on_proc_trial = to_dofs->n_local_dofs();
+					n_dofs_on_proc_test  = to_dofs->n_local_dofs();
+					break;
+				}
+
+				case LocalAssembler::MASTER_X_MASTER:
+				{
+					n_dofs_on_proc_trial = from_dofs_r->n_local_dofs();
+					n_dofs_on_proc_test  = from_dofs_r->n_local_dofs();
+					break;
+				}
+
+				case LocalAssembler::SLAVE_X_MASTER: 
+				{
+					n_dofs_on_proc_trial = to_dofs_r->n_local_dofs();
+					n_dofs_on_proc_test  = from_dofs_r->n_local_dofs();
+					break;
+				}
+
+				default:
+				{
+					assert(false);
+					break;
+				}
+			}
+
+			local2global->redistribute(comm, n_dofs_on_proc_trial, n_dofs_on_proc_test, *mat_buffer[buffer_num]);
+
+			SizeType m_max_row_entries = mat_buffer[buffer_num]->local_max_entries_x_col();
+			comm.all_reduce(&m_max_row_entries, 1, moonolith::MPIMax());
+
+			USparseMatrix mat_x = utopia::local_sparse(n_dofs_on_proc_test, n_dofs_on_proc_trial, m_max_row_entries);
+
+			{
+				utopia::Write<utopia::USparseMatrix> write(mat_x);
+				for (auto it = mat_buffer[buffer_num]->iter(); it; ++it) {
+					mat_x.set(it.row(), it.col(), *it);
+
+				}
+			}
+
+			if(opts.n_var == 1) {
+				mat = std::move(mat_x);
+				return;
+			}
+
+			auto s_mat_x = local_size(mat_x);
+			mat = local_sparse(s_mat_x.get(0), s_mat_x.get(1), opts.n_var * m_max_row_entries);
+
+			utopia::Write<USparseMatrix> w_mat(mat);
+			utopia::each_read(mat_x, [&](const utopia::SizeType i, const utopia::SizeType j, const double value) {
+				for(utopia::SizeType d = 0; d < opts.n_var; ++d) {
+					mat.set(i + d, j + d, value);
+				}
+			});
+		}
+
+		bool assemble(std::vector<std::shared_ptr<SparseMatrix> > &mats)
+		{
+			std::cout<<" I am  in assemble" <<std::endl;
+
+			if(assembler->n_forms() != mats.size()) {
+				mats.resize(assembler->n_forms());
+				std::cout<<"assembler->n_forms()"<<assembler->n_forms()<<std::endl;
+			}
+
+			for(auto &mat_ptr : mats) {
+				if(!mat_ptr) {
+					mat_ptr = std::make_shared<SparseMatrix>();
+				}
+			}
+
+			init_buffers(assembler->n_forms());
+			mats_ = mats;
+			return assemble_aux();
+		}
+
+		bool assemble_aux()
+		{
+			using namespace moonolith;
+
+			init_tree();
+
+			std::map<long, std::shared_ptr<FESpacesRAdapter> > spaces;
+			std::map<long, std::vector<std::shared_ptr<FESpacesRAdapter> > > migrated_spaces;
+
+			FESpaceSerializerDeserializer<Dimensions> serializer(
+				from_mesh->comm(),
+				opts,
+				local_spaces);
+
+			auto read = [&serializer] (
+				const long ownerrank,
+				const long senderrank,
+				bool is_forwarding, DataContainer &data,
+				InputStream &in
+			) {
+				serializer.read(ownerrank, senderrank, is_forwarding, data, in);
+			};
+
+			auto write = [&serializer] (
+				const long ownerrank, const long recvrank,
+				const std::vector<long>::const_iterator &begin,
+				const std::vector<long>::const_iterator &end,
+				const DataContainer &data,
+				OutputStream &out
+			) {
+				serializer.write(ownerrank, recvrank, begin, end, data, out);
+			};
+
+			long n_false_positives = 0, n_intersections = 0;
+
+			auto fun = [&](Adapter &master, Adapter &slave) -> bool {
+				if(this->assemble(master, slave)) {
+					n_intersections++;
+					return true;
+				} else {
+					n_false_positives++;
+					return false;
+				}
+			};
+
+			pre_assemble();
+
+			moonolith::search_and_compute(comm, tree, predicate, read, write, fun, settings);
+
+			print_stats();
+			
+			for(std::size_t i = 0; i < mats_.size(); ++i) {
+				post_assemble(i);
+			}
+
+			long n_total_candidates = n_intersections + n_false_positives;
+			long n_collection[3] = {n_intersections, n_total_candidates, n_false_positives};
+
+			comm.all_reduce(n_collection, 3, moonolith::MPISum());
+
+			if (comm.is_root()) {
+				std::cout << "n_intersections: " << n_collection[0]
+				<< ", n_total_candidates: " 	 << n_collection[1]
+				<< ", n_false_positives: " 	     << n_collection[2] << std::endl;
+			}
+
+			return true;
+		}
+
+		void init_tree()
+		{
+			using namespace moonolith;
+
+			const auto n_elements_from = from_mesh->n_active_local_elem();
+			const auto n_elements_to   = to_mesh->n_active_local_elem();
+			const auto n_elements 	  = n_elements_from + n_elements_to;
+
+			MOONOLITH_EVENT_BEGIN("create_adapters");
+
+			tree = NTreeT::New(predicate, settings.max_elements, settings.max_depth);
+			tree->reserve(n_elements);
+
+			int offset = 0;
+			if(opts.tags.empty()){
+				int space_num = 0;
+
+				for(auto s : local_spaces->spaces()) {
+
+					if(s)
+					{
+						bool first = true;
+						libMesh::dof_id_type local_element_id = 0;
+						for (auto it = s->active_local_elements_begin(); it != s->active_local_elements_end(); ++it, ++local_element_id) {
+							auto elem = *it;
+							Adapter a(*s, elem->id(), offset+local_element_id,space_num);
+							assert(!local_spaces->dof_map(space_num)[local_element_id].empty());
+							assert(!local_spaces->dof_map_reverse(space_num)[local_element_id].empty());
+							a.set_dof_map(&local_spaces->dof_map(space_num)[local_element_id].global);
+							a.set_dof_map_reverse(&local_spaces->dof_map_reverse(space_num)[local_element_id].global);
+							tree->insert(a);
+
+						}
+
+						offset += s->n_active_local_elem();
+					}
+
+					++space_num;
+				}
+
+			} else {
+
+				int space_num = 0;
+				for(auto s : local_spaces->spaces()) {
+					if(s) {
+
+						bool first = true;
+
+						libMesh::dof_id_type local_element_id = 0;
+						for (auto it = s->active_local_elements_begin(); it != s->active_local_elements_end(); ++it, ++local_element_id) {
+							auto elem=*it;
+							if (predicate->select(elem->subdomain_id())){
+								Adapter a(*s, elem->id(), offset+local_element_id,elem->subdomain_id());
+								assert(!local_spaces->dof_map(space_num)[local_element_id].empty());
+								assert(!local_spaces->dof_map_reverse(space_num)[local_element_id].empty());
+								a.set_dof_map(&local_spaces->dof_map(space_num)[local_element_id].global);
+								a.set_dof_map_reverse(&local_spaces->dof_map_reverse(space_num)[local_element_id].global);
+								tree->insert(a);
+							}
+						}
+
+						offset += s->n_active_local_elem();
+					}
+
+					++space_num;
+				}
+			}
+
+			tree->root()->bound().static_bound().enlarge(1e-8);
+
+			MOONOLITH_EVENT_END("create_adapters");
+		}
+
+		void init_buffers(const SizeType n)
+		{
+			std::cout<<"init_buffers"<<n<<std::endl;
+			mat_buffer.resize(n);
+			elemmat.resize(n);
+			local_element_matrices_sum.resize(n);
+		}
+
+	private:
+		std::shared_ptr<MeshBase> from_mesh;
+		std::shared_ptr<DofMap>   from_dofs;
+		std::shared_ptr<DofMap>   from_dofs_r;
+		std::shared_ptr<MeshBase> to_mesh;
+		std::shared_ptr<DofMap>   to_dofs;
+		std::shared_ptr<DofMap>   to_dofs_r;
+		TransferOptionsR opts;
+
+		std::shared_ptr<LocalAssembler> assembler;
+		std::shared_ptr<Local2Global> local2global;
+
+		moonolith::Communicator comm;
+		moonolith::SearchSettings settings;
+		std::shared_ptr<moonolith::MasterAndSlave> predicate;
+
+		std::shared_ptr<NTreeT> tree;
+		std::shared_ptr<FESpacesRAdapter> local_spaces;
+
+		std::vector< libMesh::DenseMatrix<libMesh::Real> > elemmat;
+		std::vector< libMesh::Real > local_element_matrices_sum;
+
+		std::vector< std::shared_ptr< moonolith::SparseMatrix<double> > > mat_buffer;
+		std::vector<std::shared_ptr<SparseMatrix>> mats_;
+	};
+
+	template class DefaultAlgorithmR<2>;
+	template class DefaultAlgorithmR<3>;
+
+
+	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+
+	TransferAssemblerR::TransferAssemblerR(
+		const std::shared_ptr<LocalAssembler> &assembler,
+		const std::shared_ptr<Local2Global> &local2global)
+	: assembler_(assembler), local2global_(local2global)
+	{}
+
+	TransferAssemblerR::~TransferAssemblerR() {}
+
+
+	bool TransferAssemblerR::assemble(
+		const std::shared_ptr<MeshBase> &from_mesh,
+		const std::shared_ptr<DofMap>   &from_dofs,
+		const std::shared_ptr<DofMap>   &from_dofs_r,
+		const std::shared_ptr<MeshBase> &to_mesh,
+		const std::shared_ptr<DofMap>   &to_dofs,
+		const std::shared_ptr<DofMap>   &to_dofs_r,
+		std::vector<std::shared_ptr<SparseMatrix> > &mats,
+		const TransferOptionsR &opts)
+	{
+		assert(assembler_    && "assembler is required");
+		assert(local2global_ && "local2global");
+
+		///////////////////////////
+
+		moonolith::Communicator comm(from_mesh->comm().get());
+
+		if(Utopia::instance().verbose()) {
+			moonolith::root_describe("---------------------------------------\n"
+				"begin: utopia::TransferAssembler::assemble",
+				comm, std::cout);
+		}
+
+		Chrono c;
+		c.start();
+
+		///////////////////////////
+
+		if(from_mesh->mesh_dimension() == 2) {
+			std::cout<<"I am here"<<std::endl;
+			algorithm_ = std::make_shared<DefaultAlgorithmR<2>>(from_mesh, from_dofs, from_dofs_r, to_mesh, to_dofs, to_dofs_r, opts, assembler_, local2global_);
+		} else if(from_mesh->mesh_dimension() == 3) {
+			algorithm_ = std::make_shared<DefaultAlgorithmR<3>>(from_mesh, from_dofs, from_dofs_r, to_mesh, to_dofs, to_dofs_r, opts, assembler_, local2global_);
+		} else {
+			assert(false && "dimension not supported");
+			return false;
+		}
+
+		std::cout<<"I am in"<<std::endl;
+
+		bool ok = algorithm_->assemble(mats);
+
+		std::cout<<"I am out"<<std::endl;
+
+
+		///////////////////////////
+		c.stop();
+
+		if(Utopia::instance().verbose()) {
+			std::stringstream ss;
+			ss << "end: utopia::TransferAssembler::assemble\n";
+			ss << c;
+			ss << "---------------------------------------";
+			moonolith::root_describe(ss.str(), comm, std::cout);
+		}
+		///////////////////////////
+
+		return ok;
+	}
+
+	bool TransferAssemblerR::assemble(
+            const std::shared_ptr<MeshBase> &from_mesh,
+			const std::shared_ptr<DofMap>   &from_dofs,
+			const std::shared_ptr<DofMap>   &from_dofs_r,
+			const std::shared_ptr<MeshBase> &to_mesh,
+			const std::shared_ptr<DofMap>   &to_dofs,
+			const std::shared_ptr<DofMap>   &to_dofs_r,
+			SparseMatrix &B,
+			const TransferOptionsR &opts
+		)
+	{
+		std::vector<std::shared_ptr<SparseMatrix> > mats;
+		mats.push_back(make_ref(B));
+		std::cout<<"I am in TransferAssemblerR::assemble"<<std::endl;
+		return assemble(from_mesh, from_dofs, from_dofs_r, to_mesh, to_dofs, to_dofs_r, mats, opts);
+	}
+}
diff --git a/utopia_fe/transfer/utopia_TransferAssemblerR.hpp b/utopia_fe/transfer/utopia_TransferAssemblerR.hpp
new file mode 100644
index 00000000..b0e164fe
--- /dev/null
+++ b/utopia_fe/transfer/utopia_TransferAssemblerR.hpp
@@ -0,0 +1,342 @@
+#ifndef UTOPIA_TRANSFER_ASSEMBLER_REV_HPP
+#define UTOPIA_TRANSFER_ASSEMBLER_REV_HPP
+
+#include "utopia_LocalAssembler.hpp"
+#include "utopia_Local2Global.hpp"
+#include "utopia_libmesh.hpp"
+#include "utopia.hpp"
+#include "utopia_Path.hpp"
+
+#include <memory>
+
+namespace utopia {
+
+	class TransferOptionsR {
+	public:
+		TransferOptionsR()
+		: from_var_num(0),from_var_num_r(0),to_var_num(0),to_var_num_r(0), n_var(1), tags({})
+		{}
+
+		int from_var_num;
+		int from_var_num_r;
+		int to_var_num;
+		int to_var_num_r;
+		int n_var;
+		std::vector< std::pair<int, int> > tags;
+	};
+
+	class TransferAssemblerR final {
+	public:
+		using FunctionSpace = utopia::LibMeshFunctionSpace;
+		using SparseMatrix  = utopia::USparseMatrix;
+		using MeshBase      = libMesh::MeshBase;
+		using DofMap        = libMesh::DofMap;
+
+		class AlgorithmR {
+		public:
+			virtual ~AlgorithmR() {}
+			// virtual bool assemble(SparseMatrix &B) = 0;
+			virtual bool assemble(std::vector<std::shared_ptr<SparseMatrix> > &B) = 0;
+		};
+
+		TransferAssemblerR(
+			const std::shared_ptr<LocalAssembler> &assembler,
+			const std::shared_ptr<Local2Global>   &local2global);
+
+		bool assemble(
+			const std::shared_ptr<MeshBase> &from_mesh,
+			const std::shared_ptr<DofMap>   &from_dofs,
+			const std::shared_ptr<DofMap>   &from_dofs_r,
+			const std::shared_ptr<MeshBase> &to_mesh,
+			const std::shared_ptr<DofMap>   &to_dofs,
+			const std::shared_ptr<DofMap>   &to_dofs_r,
+			SparseMatrix &B,
+			const TransferOptionsR &opts = TransferOptionsR()
+		);
+
+		bool assemble(
+			const std::shared_ptr<MeshBase> &from_mesh,
+			const std::shared_ptr<DofMap>   &from_dofs,
+			const std::shared_ptr<DofMap>   &from_dofs_r,
+			const std::shared_ptr<MeshBase> &to_mesh,
+			const std::shared_ptr<DofMap>   &to_dofs,
+			const std::shared_ptr<DofMap>   &to_dofs_r,
+			std::vector<std::shared_ptr<SparseMatrix> > &B,
+			const TransferOptionsR &opts = TransferOptionsR()
+		);
+
+		void set_assembler(const std::shared_ptr<LocalAssembler> &assembler)
+		{
+			assembler_ = assembler;
+		}
+
+		void set_local_2_global(const std::shared_ptr<Local2Global> &local2global)
+		{
+			local2global_ = local2global;
+		}
+
+		~TransferAssemblerR();
+
+	private:
+		std::shared_ptr<LocalAssembler> assembler_;
+		std::shared_ptr<Local2Global> local2global_;
+		std::shared_ptr<AlgorithmR> algorithm_;
+	};
+
+	class TransferOperatorR {
+	public:
+		virtual ~TransferOperatorR() {}
+		virtual void apply(const UVector &from, UVector &to) const = 0;
+		virtual void apply_transpose(const UVector &from, UVector &to) const = 0;
+		virtual void describe(std::ostream &) const {}
+		virtual bool write(const Path &) const { return false; }
+	};
+
+
+	/**
+	 * @brief constructed as (D^-1 * B) * ( . )
+	 */
+	class L2TransferOperatorR : public TransferOperatorR {
+	public:
+		inline void apply(const UVector &from, UVector &to) const override
+		{
+			UVector B_from = *B * from;
+
+			disp((*B).size().get(0));
+			disp((*B).size().get(1));
+
+			if(empty(to)) {
+				to = B_from;
+			}
+
+			linear_solver->apply(B_from, to);
+		}
+
+		void fix_mass_matrix_operator()
+		{
+			UVector d;
+
+			Size s = local_size(*D);
+			d = local_values(s.get(0), 1.);
+
+			{
+				Write<UVector> w_d(d);
+
+				each_read(*D, [&d](const SizeType i, const SizeType, const double) {
+					d.set(i, 0.);
+				});
+			}
+
+			(*D) += USparseMatrix(diag(d));
+		}
+
+		///@brief assumes that D is symmetric
+		void apply_transpose(const UVector &from, UVector &to) const override
+		{
+			UVector D_inv_from = local_zeros(local_size(*D).get(0));
+			linear_solver->apply(from, D_inv_from);
+			to = transpose(*B) * D_inv_from;
+		}
+
+		inline L2TransferOperatorR(
+			const std::shared_ptr<USparseMatrix> &B,
+			const std::shared_ptr<USparseMatrix> &D,
+			const std::shared_ptr<LinearSolver<USparseMatrix, UVector> > &linear_solver = std::make_shared<BiCGStab<USparseMatrix, UVector>>()
+			)
+		: B(B), D(D), linear_solver(linear_solver)
+		{
+			assert(B);
+			assert(D);
+			assert(linear_solver);
+
+			linear_solver->update(D);
+		}
+
+		inline void describe(std::ostream &os) const override
+		{
+			UVector t_from = local_values(local_size(*B).get(1), 1);
+			UVector t_to;
+			apply(t_from, t_to);
+
+			double t_max = max(t_to);
+			double t_min = min(t_to);
+
+			double sum_D = sum(*D);
+			double sum_B = sum(*B);
+
+			os << "------------------------------------------\n";
+			os << "L2TransferOperator:\n";
+			os << "row sum [" << t_min << ", " << t_max << "] subset of [0, 1]" << std::endl;
+			os << "sum(B) = " << sum_B << ", sum(D) = " << sum_D << std::endl;
+			os << "------------------------------------------\n";
+		}
+
+		bool write(const Path &path) const override
+		{ 
+			return utopia::write(path / "B.m", *B) && utopia::write(path / "D.m", *D);
+		}
+
+	private:
+		std::shared_ptr<USparseMatrix> B;
+		std::shared_ptr<USparseMatrix> D;
+		std::shared_ptr<LinearSolver<USparseMatrix, UVector> > linear_solver;
+	};
+
+	class PseudoL2TransferOperatorR : public TransferOperatorR {
+	public:
+		inline void apply(const UVector &from, UVector &to) const override
+		{
+			assert(T);
+			to = *T * from;
+		}
+
+		inline void apply_transpose(const UVector &from, UVector &to) const override
+		{
+			assert(T);
+			to = transpose(*T) * from;
+		}
+
+		PseudoL2TransferOperatorR() {}
+
+		inline void init_from_coupling_operator(const USparseMatrix &B)
+		{
+			T = std::make_shared<USparseMatrix>();
+			UVector d = sum(B, 1);
+
+			{
+				ReadAndWrite<UVector> rw_(d);
+				auto r = range(d);
+				for(auto k = r.begin(); k != r.end(); ++k) {
+					if(approxeq(d.get(k), 0.0, 1e-14)) {
+						d.set(k, 1.);
+					}
+				}
+			}
+
+			*T = diag(1./d) * B;
+		}
+
+		PseudoL2TransferOperatorR(const std::shared_ptr<USparseMatrix> &T)
+		: T(T)
+		{
+			assert(T);
+		}
+
+		inline void describe(std::ostream &os) const override
+		{
+			UVector t = sum(*T, 1);
+			double t_max = max(t);
+			double t_min = min(t);
+			double t_sum = sum(t);
+
+			os << "------------------------------------------\n";
+			os << "PseudoL2TransferOperator:\n";
+			os << "row sum [" << t_min << ", " << t_max << "] subset of [0, 1]" << std::endl;
+			os << "sum(T): "  << t_sum << " <= " << size(*T).get(0) << "\n";
+			os << "------------------------------------------\n";
+		}
+
+		bool write(const Path &path) const override
+		{ 
+			return utopia::write(path / "T.m", *T);
+		}
+
+	private:
+		std::shared_ptr<USparseMatrix> T;
+	};
+
+	class BidirectionalOperator final : public TransferOperatorR {
+	public:
+		BidirectionalOperator(
+			const std::shared_ptr<TransferOperatorR> &forward,
+			const std::shared_ptr<TransferOperatorR> &backward
+		) : forward_(forward), backward_(backward)
+		{}
+
+		inline void apply(const UVector &from, UVector &to) const
+		{
+			forward_->apply(from, to);
+		}
+
+		inline void apply_transpose(const UVector &from, UVector &to) const
+		{
+			backward_->apply(from, to);
+		}
+
+		inline void describe(std::ostream &os) const 
+		{
+			forward_->describe(os);
+			backward_->describe(os);
+		}
+
+		inline bool write(const Path &) const { return false; }
+
+	private:
+		std::shared_ptr<TransferOperatorR> forward_;
+		std::shared_ptr<TransferOperatorR> backward_;
+	};
+
+	class InterpolatorR : public TransferOperatorR {
+	public:
+		inline void apply(const UVector &from, UVector &to) const override
+		{
+			to = *T * from;
+		}
+
+		void apply_transpose(const UVector &from, UVector &to) const override
+		{
+			assert(T);
+			to = transpose(*T) * from;
+		}
+
+		InterpolatorR(const std::shared_ptr<USparseMatrix> &T)
+		: T(T)
+		{
+			assert(T);
+		}
+
+		void normalize_rows()
+		{
+			UVector d = sum(*T, 1);
+			ReadAndWrite<UVector> rw_(d);
+			auto r = range(d);
+			for(auto k = r.begin(); k != r.end(); ++k) {
+				if(approxeq(d.get(k), 0.0, 1e-14)) {
+					d.set(k, 1.);
+				}
+			}
+
+			*T = diag(1./d) * (*T);
+		}
+
+		inline void describe(std::ostream &os) const override
+		{
+			UVector t = sum(*T, 1);
+			double t_max = max(t);
+			double t_min = min(t);
+			double t_sum = sum(t);
+
+			os << "------------------------------------------\n";
+			os << "Interpolator:\n";
+			os << "row sum [" << t_min << ", " << t_max << "] subset of [0, 1]" << std::endl;
+			os << "sum(T): " << t_sum << " <= " << size(*T).get(0) << "\n";
+			os << "------------------------------------------\n";
+		}
+
+		bool write(const Path &path) const override
+		{ 
+			return utopia::write(path / "T.m", *T);
+		}
+
+	private:
+		std::shared_ptr<USparseMatrix> T;
+	};
+
+
+	enum TransferOperatorRType {
+		BIDIRECTIONAL_L2_PROJECTION = 0,
+		BIDIRECTIONAL_PSEUDO_L2_PROJECTION= 1
+	};
+}
+
+#endif //UTOPIA_TRANSFER_ASSEMBLER_HPP
